#include "softspi.h"

void softspi_setup_master(void)
{
    SOFTSPI_CLK_DDR |= SOFTSPI_CLK_MASK;
    SOFTSPI_MOSI_DDR |= SOFTSPI_MOSI_MASK;

    #if (SOFTSPI_DONT_USE_MISO == 0)
    SOFTSPI_MISO_DDR |= SOFTSPI_MISO_MASK;
    #endif
}

static inline void softspi_clk_low(void)
{
    SOFTSPI_CLK_PORT &= ~SOFTSPI_CLK_MASK;
}

static inline void softspi_clk_high(void)
{
  SOFTSPI_CLK_PORT |= SOFTSPI_CLK_MASK;
}

static inline void softspi_mosi_low(void)
{
    SOFTSPI_MOSI_PORT &= ~SOFTSPI_MOSI_MASK;
}

static inline void softspi_mosi_high(void)
{
    SOFTSPI_MOSI_PORT |= SOFTSPI_MOSI_MASK;
}

static inline void softspi_wait_clk(void)
{
    _delay_us(50);
}

static inline void softspi_write_bit(uint8_t x, uint8_t m)
{
    /* dac7554 samples at clock falling edge */

    /* 5 insns per bit */

    softspi_clk_high();
    softspi_wait_clk();
    if (x & m) {
        softspi_mosi_high();
    } else {
        softspi_mosi_low();
    }
    softspi_clk_low();
}

void softspi_write_uint8(uint8_t x)
{
    /* transmit msb first, sample at clock falling edge */

    softspi_write_bit(x, (1 << 7));
    softspi_write_bit(x, (1 << 6));
    softspi_write_bit(x, (1 << 5));
    softspi_write_bit(x, (1 << 4));
    softspi_write_bit(x, (1 << 3));
    softspi_write_bit(x, (1 << 2));
    softspi_write_bit(x, (1 << 1));
    softspi_write_bit(x, (1 << 0));
}

static inline void softspi_write_uint16(uint16_t x)
{
    softspi_write_uint8((uint8_t)(x >> 8));
    softspi_write_uint8((uint8_t)(x & 0xff));
}

static inline void softspi_read_bit(uint8_t* x, uint8_t i)
{
    /* read at falling edge */

    softspi_clk_high();
    //softspi_wait_clk();
    softspi_clk_low();

    if (SOFTSPI_MISO_PIN & SOFTSPI_MISO_MASK) *x |= 1 << i;
    }

uint8_t softspi_read_uint8(void)
{
    /* receive msb first, sample at clock falling edge */

    /* must be initialized to 0 */
    uint8_t x = 0;

    softspi_read_bit(&x, 7);
    softspi_read_bit(&x, 6);
    softspi_read_bit(&x, 5);
    softspi_read_bit(&x, 4);
    softspi_read_bit(&x, 3);
    softspi_read_bit(&x, 2);
    softspi_read_bit(&x, 1);
    softspi_read_bit(&x, 0);

    return x;
}

static inline uint16_t softspi_read_uint16(void)
{
    /* msB ordering */
    const uint8_t x = softspi_read_uint8();
    return ((uint16_t)x << 8) | (uint16_t)softspi_read_uint8();
}

void softspi_read(uint8_t* data, uint8_t len)
{
       uint8_t i;      
       for (i = 0; i < len; i++) {
             data[i] = softspi_read_uint8();
       }
}

void softspi_write(uint8_t* data, uint8_t len)
{
       uint8_t i;      
       for (i = 0; i < len; i++) {
             softspi_write_uint8(data[i]);
       }
}
