/*
 * Author: Oscar Martinez
 * Copyright (c) 2012 All rights reserved.
 */

#include <stdio.h>
#include <string.h>
#include "usb_serial.h"
#include "Utils.h"

// I/O fail count
unsigned int READ_FAIL_COUNT = 0;
unsigned int READ_FAIL_MAX = 100;

void send_buf(void) {
	int i;
	for (i = 0; i < BUFFER_LENGTH; i++) {
		if (buf_out[i] == '\0') break;
		else usb_serial_putchar(buf_out[i]);
	}

	// clear output buffer
	memset(buf_out, '\0', BUFFER_LENGTH);
}

int read_buf(void) {

	// clear buffer before reading
	memset(buf_in, '\0', BUFFER_LENGTH);

	// populate buffer array
	int i = 0, char_tmp;
	for (i = 0; i < BUFFER_LENGTH; i++) {
		char_tmp = usb_serial_getchar();
		if (char_tmp == '\0' || char_tmp == -1) break;
		else buf_in[i] = char_tmp;
	}

	// make sure that we are receiving commands from master
	if (strncmp(buf_in, "M:", 2) && READ_FAIL_COUNT++ <= READ_FAIL_MAX) {
		return read_buf();
	} else {
		READ_FAIL_COUNT = 0;
		return i;
	}
}

void parse_command(char* command) {

	// the host device is asking us if we are ready
	if (!strncmp(command, "M:READY?", 8)) {
		sprintf(buf_out, "S:uC READY\n");
		send_buf();

	// otherwise it must be a command for the servo
	} else {
		Servo_parse(command);
	}
}
